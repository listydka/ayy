import numpy as np
import matplotlib.pyplot as plt
import time
from math import factorial

# Рекурсивные реализации функций
def F_recursive(n):
    if n == 1:
        return 1
    return (-1)**n * (G_recursive(n-1) / factorial(2*n))

def G_recursive(n):
    if n == 1:
        return 1
    return F_recursive(n-1)

# Итеративные реализации функций
def F_iterative(n):
    F = [1]  # F(1)
    G = [1]  # G(1)
    for i in range(2, n + 1):
        G.append(F[-1])
        F.append((-1)**i * (G[-1] / factorial(2*i)))
    return F[-1]

def G_iterative(n):
    F = [1]  # F(1)
    G = [1]  # G(1)
    for i in range(2, n + 1):
        G.append(F[-1])
        F.append((-1)**i * (G[-1] / factorial(2*i)))
    return G[-1]

# Сравнение времени выполнения
def time_comparison(max_n):
    rec_times_F = []
    rec_times_G = []
    it_times_F = []
    it_times_G = []

    for n in range(1, max_n + 1):
        # Время рекурсивного вычисления F(n)
        start = time.time()
        F_recursive(n)
        end = time.time()
        rec_times_F.append(end - start)

        # Время рекурсивного вычисления G(n)
        start = time.time()
        G_recursive(n)
        end = time.time()
        rec_times_G.append(end - start)

        # Время итеративного вычисления F(n)
        start = time.time()
        F_iterative(n)
        end = time.time()
        it_times_F.append(end - start)

        # Время итеративного вычисления G(n)
        start = time.time()
        G_iterative(n)
        end = time.time()
        it_times_G.append(end - start)

    return rec_times_F, rec_times_G, it_times_F, it_times_G

# Параметры для исследования
max_n = 20  # Установите предел, чтобы избежать чрезмерного времени выполнения
rec_times_F, rec_times_G, it_times_F, it_times_G = time_comparison(max_n)

# Построение графиков
n_values = list(range(1, max_n + 1))

plt.figure(figsize=(14, 7))

# Графики времени выполнения
plt.subplot(2, 2, 1)
plt.plot(n_values, rec_times_F, label='Recursive F(n)', marker='o')
plt.plot(n_values, it_times_F, label='Iterative F(n)', marker='x')
plt.xlabel('n')
plt.ylabel('Time (seconds)')
plt.title('Time Comparison for F(n)')
plt.legend()
plt.grid(True)

plt.subplot(2, 2, 2)
plt.plot(n_values, rec_times_G, label='Recursive G(n)', marker='o')
plt.plot(n_values, it_times_G, label='Iterative G(n)', marker='x')
plt.xlabel('n')
plt.ylabel('Time (seconds)')
plt.title('Time Comparison for G(n)')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

# Табличное представление времени
import pandas as pd

data = {
    'n': n_values,
    'Recursive F(n)': rec_times_F,
    'Iterative F(n)': it_times_F,
    'Recursive G(n)': rec_times_G,
    'Iterative G(n)': it_times_G
}
df = pd.DataFrame(data)
print(df)
