# Функция для преобразования числа в пропись
def number_to_words(num):
    ones = {
        '0': 'ноль', '1': 'один', '2': 'два', '3': 'три', '4': 'четыре',
        '5': 'пять', '6': 'шесть', '7': 'семь', '8': 'восемь', '9': 'девять'
    }
    return ' '.join([ones[digit] for digit in str(num)])

# Функция для обработки десятка
def process_decade(numbers, K):
    # Подсчет количества одинаковых чисел
    counts = {}
    for number in numbers:
        counts[number] = counts.get(number, 0) + 1

    # Проверяем, есть ли более K одинаковых чисел
    if any(count > K for count in counts.values()):
        # Выводим все числа десятка
        for i, number in enumerate(numbers):
            if i == len(numbers) - 1:
                # Последнее число выводим прописью
                print(number_to_words(number))
            else:
                print(number, end=' ')
        print()

# Основная функция
def process_file(file_path, K, block_size=1024):
    with open(file_path, 'r') as file:
        buffer = ''
        current_decade = []
        while True:
            block = file.read(block_size)
            if not block:
                break

            # Обрабатываем содержимое буфера и блока
            buffer += block
            tokens = buffer.split()  # Разбиваем на лексемы

            for token in tokens[:-1]:
                if token.isdigit():  # Проверяем, является ли лексема числом
                    current_decade.append(int(token))
                    if len(current_decade) == 10:
                        # Обработка десятка
                        process_decade(current_decade, K)
                        current_decade = []

            # Последняя лексема может быть неполной, сохраняем её в буфер
            buffer = tokens[-1]

        # Обработка последнего десятка, если файл закончился
        if current_decade:
            process_decade(current_decade, K)

# Ввод данных
file_path = input("Введите путь к файлу: ")
K = int(input("Введите значение K: "))

# Запуск обработки файла
process_file(file_path, K)

